# this file defines a set of jobs that will run when triggered on a cloned version of your repo
# a job is a set of steps
# by default, theres just one job and you give it its list of steps

# by default, all branches get built
# but adding a trigger configuration like this says "only build master branch"
trigger:
- master

# a pool is a set of machines for running this job
# this configuration says: "use Microsoft's hosted Ubuntu Linux virtual machines"
# (we could, if we wanted, have it connect to a machine WE control to run the job on)
pool:
  vmImage: 'ubuntu-latest'

# the steps in the job
# "script" is one kind of step - on linux itll run in bash
# give all steps a good display name
steps:
- script: dotnet build
  workingDirectory: Project1.WebUI/
  displayName: dotnet build

# we can publish test results to azure pipeline
# have the build agent (the machine running the steps)
# notify azure pipelines of that useful info to keep alongside the build logs

# apart from script, there's also "task" steps
# a task step implements common build operations that would be clumsy to write out by hand

#- script: dotnet test <test-project> --logger trx
#  workingDirectory: Project1.WebUI/
#  continueOnError: true
#  displayName: dotnet test

- script: dotnet test --logger trx
  workingDirectory: Project1.WebUI/
  displayName: dotnet test
- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'

- task: DotNetCoreCLI@2
  displayName: dotnet publish
  inputs:
    command: 'publish'
    publishWebProjects: true

#this task looks for a zip file and deploys it to the app service
- task: AzureRmWebAppDeployment@4
  displayName: Azure Deploy
  inputs:
    ConnectionType: 'AzureRM'
    azureSubscription: 'Azure subscription 1 (750ddbda-b710-43de-9ec8-b03ede22e082)'
    appType: 'webApp'
    WebAppName: 'Project1Koch'
    packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'

    